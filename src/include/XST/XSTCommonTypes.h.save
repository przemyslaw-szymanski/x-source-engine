#ifndef XST_COMMON_TYPES_H
#define XST_COMMON_TYPES_H

#include "XSTCommonInclude.h"

namespace XST
{

	namespace Types
	{
		typedef unsigned char	u8;
		typedef unsigned short	u16;
		typedef unsigned int	u32;
		typedef unsigned long	ul32;
		typedef char			i8;
		typedef short			i16;
		typedef int				i32;
		typedef long			l32;
		typedef unsigned long	dword;
		typedef float			f32;
		typedef double			f64;
		typedef char			ch8;
		typedef wchar_t			ch16;
		typedef const ch16*		lpcwstr;
		typedef const ch8*		lpcastr;
		typedef lpcastr			xst_lpcstr;
		typedef lpcwstr			xst_lpcwstr;
		typedef u8*				pu8;
		typedef u16*			pu16;
		typedef u32*			pu32;
		typedef ul32*			pul32;
		typedef i8*				pi8;
		typedef i16*			pi16;
		typedef i32*			pi32;
		typedef l32*			pl32;
		typedef dword*			pdword;
		typedef f32*			pf32;
		typedef f64*			pf64;
		typedef ch8*			pch8;
		typedef ch16*			pch16;
		typedef void*			xst_unknown;
		typedef ch8*			lpastr;
		typedef ch16*			lpwstr;
		typedef const f32		cf32;
		typedef const f64		cf64;
		typedef const u8		cu8;
		typedef const ch8		cch8;
		typedef const ch16		cch16;
		typedef const u16		cu16;
		typedef const u32		cu32;
		typedef const l32		cl32;
		typedef const ul32		cul32;
		typedef const i16		ci16;
		typedef const i32		ci32;

		#if defined XST_STL
		#	define xst_vector		std::vector
		#	define xst_list			std::list
		#	define xst_map			stdext::hash_map
		#	define xst_pair			std::pair
		#	define xst_astring		std::string
		#	define xst_wstring		std::wstring
		#	define xst_stack		XST::TCStack
		#	define xst_queue std::queue
		#else
		#	if defined XST_STLPORT
		#		define xst_vector		_STL::vector
		#		define xst_map			_STL::map
		#		define xst_pair			_STL::pair
		#		define xst_astring		_STL::string
		#		define xst_wstring		_STL::wstring
		#	endif //_USING_SLTPORT
		#endif //_USING_STL

		typedef const xst_astring	xst_castring;
		typedef const xst_wstring	xst_cwstring;

		struct RESULT
		{
			enum
			{
				OK = 0,
				FAILED,
				FAILED_CRITICAL,
			};
		};


		#define xst_i					inline
		#if defined XST_VISUAL_STUDIO //if visual studio
		#	define xst_fi				__forceinline
		#	define XST_ALIGN(_bytes)	__declspec( align( _bytes ) )
			typedef	__m128				m128;
		#else
		#	define	xst_fi				inline
			typedef f32 				m128[4];
		#	define XST_ALIGN(_bytes)    __
		#endif

		#if defined (_UNICODE) || (UNICODE)
		#	define XST_TEXT(_text)	L##_text
		#	define xst_string xst_wstring
			typedef lpcastr lpcstr;
		#else
		#	define XST_TEXT(_text) _text
		#	define xst_string xst_astring
			typedef lpcwstr lpcstr;
		#endif //UNICODE

		#if defined (_DEBUG)
		#	define xst_assert(_error, _text)	assert((_error) && (_text))
		#else
		#	define xst_assert(_error, _text)
		#endif//_DEBUG

		#define XST_TO_TEXT(_type)	#_type
		#define xst_init(_pData, _DataType)		memset(_pData, 0, sizeof(_DataType))
		#define xst_zero(_pData, _uiDataSize)	memset(_pData, 0, _uiDataSize)

		class CPoint
		{
			public:
				CPoint(float _fX = 0.0f, float _fY = 0.0f, float _fZ = 0.0f) : x(_fX), y(_fY), z(_fZ) {}
				float x,y,z;
		};


		#define xst_v				virtual
		#define XST_DECL(_type, _func)	_type _func
		#define XST_DECLV(_type, _func) xst_v XST_DECL(_type, _func)
		#define XST_DECLPV(_type, _func) XST_DECLV(_type, _func) = 0
		#define XST_IUNKNOWN	XST::IObject
		#define XST_CLASS(_name) class _name
		#define XST_INTERFACE(_name) XST_CLASS(_name) : public XST_IUNKNOWN



		#if defined XST_STL || XST_STLPORT
		#	define XSTVectorClear(_Vector, _dataType) _Vector.clear(); xst_vector<_dataType>().swap(_Vector)
			typedef xst_pair<CPoint, CPoint>	Line;
			typedef xst_vector<Line>			Lines;
			typedef xst_vector<CPoint>			Points;
			#define xst_copy					std::copy
		#endif //_USING_STL || _USING_STLPORT

		#define CE_SELECTION_EXCEPTION	100

		//#define xst_new new
		//#define xst_delete delete
		#if defined(_DEBUG)
			#define xst_delete(_pPtr) if(_pPtr) delete (_pPtr); (_pPtr) = 0
			#define xst_deletea(_pArray) if(_pArray) delete[] (_pArray); (_pArray) = 0
		#else//if defined(_DEBUG)
			#define xst_delete(_pPtr) delete (_pPtr); (_pPtr) = 0
			#define xst_deletea(_pArray) delete[] (_pArray); (_pArray) = 0
		#endif
		#if defined(XST_VISUAL_STUDIO)
		#	define xst_memcpy(_dst, _dstSize, _src, _maxCount) memcpy_s( _dst, _dstSize, _src, _maxCount )
		#	define xst_strcpy(_dst, _sizeInBytes, _src) strcpy_s( _dst, _sizeInBytes, _src )
		#else
		#	define xst_memcpy(_dst, _dstSize, _src, _maxCount)	memcpy(_dst, _src, _maxCount)
		#	define xst_strcpy(_dst, _sizeInBytes, _src) strcpy( _dst, _src )
		#endif

		#define xst_out	*



		/*static void XSTSetLastError(xst_castring _strError)
		{
			g_strXSTLastError = _strError;
		}

		static xst_castring& XSTGetLastError()
		{
			return g_strXSTLastError;
		}*/

		#define XST_CALL_MEMBER_FN(object,ptrToMember)  ((object).*(ptrToMember))
		#define XST_CALL_MEMBER_FN_PTR(object,ptrToMember)  ((object)->*(ptrToMember))
		#define	XST_CALL_METHOD(_object, _MethodPtr) ( (_object).*(_MethodPtr) )
		#define	XST_CALL_METHODP(_objectPtr, _MethodPtr) ( (_objectPtr)->*(_MethodPtr) )

		// Replace _NORMAL_BLOCK with _CLIENT_BLOCK if you want the
		//allocations to be of _CLIENT_BLOCK type
		#if defined (_DEBUG)
		#	define dbg_new new( _NORMAL_BLOCK, __FILE__, __LINE__)
		#	define dbg_new_p(_param) new( _NORMAL_BLOCK, __FILE__, __LINE__, _param)
		#	if defined (XST_VISUAL_STUDIO)
		#		define xst_malloc(_size)			_malloc_dbg(_size, _NORMAL_BLOCK, __FILE__, __LINE__)
		#		define xst_calloc(_count, _size)	_calloc_dbg(_count, _size, _NORMAL_BLOCK, __FILE__, __LINE__)
		#		define xst_free(_ptr)				_free_dbg(_ptr, _NORMAL_BLOCK); _ptr = 0
		#	else //if not visual studio
		#		define xst_malloc(_size)			malloc(_size)
		#		define xst_calloc(_count, _size)	calloc(_count, _size)
		#		define xst_free(_ptr)				free(_ptr)
		#	endif //if visual studio
		#	define xst_new dbg_new
		#	define xst_new_p(_param) dbg_new_p(_param)
		#else //if not debug
		#	define xst_new new(std::nothrow)
		#	define xst_new_p(_param)			new(std::nothrow, _param)
		#	define xst_malloc(_size)			malloc(_size)
		#	define xst_calloc(_count, _size)	calloc(_count, _size)
		#	define xst_free(_ptr)				free(_ptr); _ptr = 0
		#endif//DEBUG

		#if defined (XST_WINDOWS)
		#	define xst_local_alloc(_flags, _size)	::LocalAlloc(_flags, _size)
		#	define xst_local_free(_ptr)				::LocalFree(_ptr); _ptr = 0
		#	define xst_global_alloc(_flags, _size)	::GlobalAlloc(_flags, _size)
		#	define xst_global_free(_ptr)			::GlobalFree(_ptr); _ptr = 0
		#else //if not windows
		#	define xst_local_alloc(_flags, _size)	xst_malloc(_size)
		#	define xst_local_free(_ptr)				xst_free(_ptr); _ptr = 0
		#	define xst_global_alloc(_flags, _size)	xst_malloc(_size)
		#	define xst_global_free(_ptr)			xst_free(_ptr); _ptr = 0
		#endif //if windows

		#define xst_lalloc(_size)				xst_local_alloc(0x0000 | 0x0040, _size)
		#define xst_lfree(_ptr)					xst_local_free(_ptr)
		#define xst_galloc(_size)				xst_global_alloc(0x0000, _size)
		#define xst_gfree(_ptr)					xst_global_free(_ptr)




		#if defined(XST_NODLL)
		#	define XST_API
		#else//IF NOT DEFINED _XS_NO_DLL
		#	if defined(XST_DLL_EXPORT)
		#		define XST_API	__declspec(dllexport)
		#	else//IF NOT DEFINTD XS_DLL_EXPORT
		#		define XST_API	__declspec(dllimport)
		#	endif//CORE_DLL_EXPORT
		#endif//_XS_NO_DLL


	}//Types

	#define XST_TYPES XST::Types;

}//XST

#endif
