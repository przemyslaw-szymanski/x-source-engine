
struct VS_OUT
{
	float4 f4VertexPos : SV_POSITION;
	float3 f3Normal : NORMAL;
	float3 f3Pos : TEXCOORD0;
};

float4 ps(VS_OUT IN) : SV_TARGET
{
	const float3 f3VertexPos = IN.f3Pos;
	float3 f3N = normalize( IN.f3Normal );
	float3 f3L = normalize( f3LightPos - f3VertexPos );
	float fDL = max( dot( f3N, f3L ), 0.0 );
	float4 c;
	c.rgba = f4MaterialAmbientColor;
	c.rgb = fDL;
	return c;
}

/*
 fragmentLighting.vert:

attribute vec4 glt_Vertex;
attribute vec4 glt_Normal;

uniform mat4 glt_ModelView;
uniform mat4 glt_Projection;

varying vec3 glt_vPosition;
varying vec3 glt_vNormal;

void main()
{
    mat4 mvp = glt_Projection * glt_ModelView;
    gl_Position = mvp * glt_Vertex;
    glt_vPosition = (glt_ModelView * glt_Vertex).xyz;
    glt_vNormal = (glt_ModelView * glt_Normal).xyz;
}

fragmentLighting.frag

precision mediump float;

uniform samplerCube glt_Texture0;

varying vec3 glt_vPosition;
varying vec3 glt_vNormal;

void main()
{
    vec3 P = normalize(glt_vPosition);
    vec3 N = normalize(glt_vNormal);
    gl_FragColor.xyz = reflect(P, N);
    gl_FragColor.a = 1.0;
}

*/