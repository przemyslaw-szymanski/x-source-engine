
// static
xst_fi f32 CVector4::Dot(const Vec4& V1, const Vec4& V2)
{
#if defined( XST_SSE2 )
	m128 vTemp2 = V2.v;
    m128 vTemp = _mm_mul_ps(V1.v,vTemp2);
    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp,_MM_SHUFFLE(1,0,0,0)); // Copy X to the Z position and Y to the W position
    vTemp2 = _mm_add_ps(vTemp2,vTemp);          // Add Z = X+Z; W = Y+W;
    vTemp = _mm_shuffle_ps(vTemp,vTemp2,_MM_SHUFFLE(0,3,0,0));  // Copy W to the Z position
    vTemp = _mm_add_ps(vTemp,vTemp2);           // Add Z and W together
    return XST_SSE_PERMUTE_PS(vTemp,_MM_SHUFFLE(2,2,2,2)).m128_f32[ 0 ];    // Splat Z and return
#else
	return V1.x * V2.x + V1.y * V2.y + V1.z * V2.z + V1.w * V2.w;
#endif
}

// static
xst_fi void CVector4::Abs(Vec4* pOut, const Vec4& vecOther)
{
#if defined( XST_SSE2 )
	pOut->v = _mm_andnot_ps( SIGN_MASK.v, vecOther.v );
#else
	*pOut = Vec4( Math::Abs( vecOther.x ), Math::Abs( vecOther.y ), Math::Abs( vecOther.z ), Math::Abs( vecOther.w ) );
#endif
}

// static
xst_fi Vec4 CVector4::Abs(const Vec4& V1)
{
	CVector4 vecRet;
	Abs( &vecRet, V1 );
	return vecRet;
}